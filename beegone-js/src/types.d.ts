/*
 Generated by typeshare 1.13.3
*/

export type Id = number;

export enum Color {
	Light = "light",
	Dark = "dark",
}

export enum Species {
	Drone = "drone",
	Worker = "worker",
	Nurse = "nurse",
	Builder = "builder",
	Explorer = "explorer",
	Guard = "guard",
	Queen = "queen",
}

export interface Bee {
	color: Color;
	species: Species;
}

export interface Board {
}

export interface Pos {
	q: number;
	r: number;
}

export interface MoveAction {
	from: Pos;
	to: Pos;
}

export interface WithId<T> {
	id: Id;
	inner: T;
}

export type Piece = 
	| { type: "bee", content: Bee }
	| { type: "wall", content?: undefined };

export interface SpawnAction {
	on: Pos;
	spawn: WithId<Piece>;
}

export interface State {
	board: Board;
	turn: Color;
}

export type Action = 
	| { type: "move", content: MoveAction }
	| { type: "spawn", content: SpawnAction };

